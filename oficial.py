import tkinter as tk  # Biblioteca para criar interfaces gr√°ficas
from tkinter import messagebox  # Para mostrar mensagens em pop-up
import random, sys  # random para embaralhar, sys para sair do app

# Classe que representa uma pergunta
class Pergunta:
    def __init__(self, enunciado, alternativas, correta, curiosidade):
        # Armazena os dados da pergunta
        self.__enunciado = enunciado
        self.__alternativas = alternativas
        self.__correta = correta
        self.__curiosidade = curiosidade

    # M√©todos para acessar os dados da pergunta
    def get_enunciado(self):
        return self.__enunciado

    def get_alternativas(self):
        return self.__alternativas

    def get_correta(self):
        return self.__correta

    def get_curiosidade(self):
        return self.__curiosidade

# Lista de perguntas do quiz
perguntas = [
    Pergunta(
        "Qual √© o papel da RNA polimerase na transcri√ß√£o?",
        ["Ligar amino√°cidos ao tRNA", "Ler o DNA e formar uma fita de RNA", "Traduzir RNA em prote√≠na", "Romper a dupla-h√©lice"],
        "Ler o DNA e formar uma fita de RNA",
        "A RNA polimerase √© a enzima que sintetiza RNA a partir da fita molde de DNA."
    ),
    Pergunta(
        "Durante a tradu√ß√£o, o que o ribossomo faz?",
        ["Replica o DNA", "Produz energia", "Liga amino√°cidos em sequ√™ncia para formar uma prote√≠na", "Corta o RNA"],
        "Liga amino√°cidos em sequ√™ncia para formar uma prote√≠na",
        "O ribossomo l√™ os c√≥dons do RNA mensageiro e monta a prote√≠na correspondente."
    ),
    Pergunta(
        "O que s√£o √≠ntrons?",
        ["Regi√µes codificantes do DNA", "Partes do RNA que formam prote√≠nas", "Segmentos removidos do pr√©-mRNA", "Genes mitocondriais"],
        "Segmentos removidos do pr√©-mRNA",
        "√çntrons s√£o regi√µes que n√£o codificam prote√≠nas e s√£o retiradas durante o splicing do RNA."
    ),
    Pergunta(
        "Qual a principal fun√ß√£o dos plasm√≠deos em biotecnologia?",
        ["Produzir ATP", "Codificar enzimas digestivas", "Atuar como vetores de DNA", "Realizar a fotoss√≠ntese"],
        "Atuar como vetores de DNA",
        "Plasm√≠deos s√£o usados para introduzir genes em organismos como bact√©rias."
    ),
    Pergunta(
        "Em que fase do ciclo celular ocorre a duplica√ß√£o do DNA?",
        ["G1", "G2", "S", "Mitose"],
        "S",
        "A fase S (s√≠ntese) √© onde ocorre a replica√ß√£o do DNA antes da divis√£o celular."
    )
]

# Classe principal que controla o quiz
class QuizApp:
    def __init__(self, root):
        self.root = root
        root.title("DNA Quiz üéì")
        root.geometry("520x450")
        root.configure(bg="#e0ffff")

        # Embaralha as perguntas
        self.perguntas = random.sample(perguntas, len(perguntas))
        self.indice = self.pontos = 0  # √çndice da pergunta atual e pontua√ß√£o

        # T√≠tulo da pergunta
        self.lbl = tk.Label(root, font=("Arial", 14, "bold"), wraplength=480, bg="#e0ffff")
        self.lbl.pack(pady=20)

        # Bot√µes para alternativas
        self.botoes = [tk.Button(root, width=40, font=("Arial", 10), bg="#add8e6",
                                 command=lambda i=i: self.responder(i)) for i in range(4)]
        for b in self.botoes:
            b.pack(pady=5)

        # Feedback de resposta
        self.feedback = tk.Label(root, font=("Arial", 12), bg="#e0ffff")
        self.feedback.pack(pady=10)

        # Pontua√ß√£o atual
        self.pontuacao = tk.Label(root, text="Pontua√ß√£o: 0", font=("Arial", 12, "bold"), bg="#e0ffff")
        self.pontuacao.pack()

        # Bot√£o de sair
        self.botao_sair = tk.Button(root, text="‚ùå Sair", bg="#ffcc99", font=("Arial", 12), command=self.sair)
        self.botao_sair.pack(pady=10)

        # Confirma a√ß√£o ao fechar a janela
        root.protocol("WM_DELETE_WINDOW", self.sair)

        # Exibe a primeira pergunta
        self.proxima()

    # Mostra a pr√≥xima pergunta
    def proxima(self):
        self.feedback.config(text="")
        if self.indice < len(self.perguntas):
            p = self.perguntas[self.indice]
            self.lbl.config(text=p.get_enunciado())
            alternativas = p.get_alternativas()
            random.shuffle(alternativas)
            for i, alt in enumerate(alternativas):
                self.botoes[i].config(text=alt, state="normal", bg="#add8e6")
        else:
            self.final()

    # Avalia a resposta escolhida
    def responder(self, i):
        for b in self.botoes:
            b.config(state="disabled")

        p = self.perguntas[self.indice]
        correta = p.get_correta()
        curiosidade = p.get_curiosidade()
        escolha = self.botoes[i].cget("text")
        acerto = escolha == correta

        self.pontos += acerto
        self.pontuacao.config(text=f"Pontua√ß√£o: {self.pontos}")

        emoji = "‚úÖ" if acerto else "‚ùå"
        cor = "#90ee90" if acerto else "#ff6347"
        self.feedback.config(
            text=f"{emoji} {('Correto!' if acerto else f'Errado! Correto: {correta}')}\nüí° {curiosidade}",
            fg="green" if acerto else "red"
        )

        # Destaca a resposta correta
        for b in self.botoes:
            if b.cget("text") == correta:
                b.config(bg="#90ee90")
        self.botoes[i].config(bg=cor)

        # Vai para a pr√≥xima pergunta ap√≥s 3 segundos
        self.root.after(3000, self.avancar)

    # Avan√ßa para pr√≥xima pergunta
    def avancar(self):
        self.indice += 1
        self.proxima()

    # Finaliza o quiz com mensagem
    def final(self):
        nota = self.pontos / len(self.perguntas)
        if nota == 1:
            msg = "üèÜ Gabaritou! Voc√™ √© um mestre da Biologia!"
        elif nota >= 0.6:
            msg = "üëè Muito bem! Quase l√°!"
        else:
            msg = "üìö Que tal revisar um pouco mais?"

        resultado = f"Voc√™ acertou {self.pontos} de {len(self.perguntas)}!\n{msg}"

        self.lbl.config(text=resultado)
        self.feedback.config(text="Fim de jogo üéâ", fg="blue")
        messagebox.showinfo("Fim", resultado)

        for b in self.botoes:
            b.config(state="disabled")

    # Pergunta se o usu√°rio quer sair do jogo
    def sair(self):
        if messagebox.askyesno("Sair", "Deseja realmente sair?"):
            self.root.destroy()
            sys.exit()

# Executa o programa
if __name__ == "__main__":
    tk.Tk().after(0, lambda: QuizApp(tk._default_root))
    tk.mainloop()
